// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  itemsSold Product[]
  carts     Cart[]
  Order     Order[]
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String            @db.Text
  discount        Int 
  price           Decimal
  stock           Int
  img             String
  createdAt       DateTime @default(now())
  seller          User              @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId        Int
  cartItems       CartItem[]
  ProductCategory ProductCategory[]
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  ProductCategory ProductCategory[]
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
}

model Cart {
  id        Int        @id @default(autoincrement())
  isActive  Boolean    @default(true)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  cartItems CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  cartId    Int
  order     Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId   Int?
}

model Order {
  id           Int        @id @default(autoincrement())
  orderItems   CartItem[]
  total        Decimal
  deliveryDate DateTime
  status       Status     @default(PENDING)
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

enum Role {
  ADMIN
  SELLER
  USER
}

enum Status {
  PENDING
  SHIPPED
  DELIVERED
}
